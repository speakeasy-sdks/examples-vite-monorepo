/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * A random UUID
 */
export type GenerateUUIDResponseBody = {
    uuid: string;
};

export type GenerateUUIDResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A random UUID
     */
    object?: GenerateUUIDResponseBody | undefined;
};

/** @internal */
export namespace GenerateUUIDResponseBody$ {
    export type Inbound = {
        uuid: string;
    };

    export const inboundSchema: z.ZodType<GenerateUUIDResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            uuid: z.string(),
        })
        .transform((v) => {
            return {
                uuid: v.uuid,
            };
        });

    export type Outbound = {
        uuid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GenerateUUIDResponseBody> = z
        .object({
            uuid: z.string(),
        })
        .transform((v) => {
            return {
                uuid: v.uuid,
            };
        });
}

/** @internal */
export namespace GenerateUUIDResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GenerateUUIDResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GenerateUUIDResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GenerateUUIDResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GenerateUUIDResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GenerateUUIDResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GenerateUUIDResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
